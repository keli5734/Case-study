
rm(list=ls())  # clear memory



library(tidyverse)
library(bayesplot)
library(deSolve)
library(readxl)
library(wesanderson)
library(plyr)
library(latex2exp)


V.dataset.HP <- read_excel("~/Desktop/DDE-macrophages/ViralLoadData.xls",2)
V.data.HP <- V.dataset.HP$Y
V.time.HP <- V.dataset.HP$Day

M.dataset.HP <- read_excel("~/Desktop/DDE-macrophages/MacrophageData.xls",2)
M.data.HP <- M.dataset.HP$Y * 1e+5
M.time.HP <- M.dataset.HP$Day


V.dataset.LP <- read_excel("~/Desktop/DDE-macrophages/ViralLoadData.xls",4)
V.data.LP <- V.dataset.LP$Y
V.time.LP <- V.dataset.LP$Day

M.dataset.LP <- read_excel("~/Desktop/DDE-macrophages/MacrophageData.xls",4)
M.data.LP <- M.dataset.LP$Y * 1e+5
M.time.LP <- M.dataset.LP$Day


fit_HP<- readRDS("~/Desktop/DDE-macrophages/GlobalSensitivityAnalysis/case study/H5N1/fit_Model_H5N1.HP_sM.rds")
fit_LP <- readRDS("~/Desktop/DDE-macrophages/GlobalSensitivityAnalysis/case study/H5N1/fit_Model_H5N1.LP_sM.rds")
# show summary result
print(fit_HP , pars = c("log10_theta"))
print(fit_LP, pars = c("log10_theta"))
# extract posterior samples for selected parameters

posterior_samples_HP = rstan::extract(fit_HP, pars = c("log10_theta"), inc_warmup = TRUE, permuted = FALSE)
posterior_samples_merged_after_burnin.HP = rstan::extract(fit_HP, pars = c("log10_theta"))

posterior_samples_all.LP = rstan::extract(fit_LP, pars = c("log10_theta"), inc_warmup = TRUE, permuted = FALSE)
posterior_samples_merged_after_burnin.LP = rstan::extract(fit_LP, pars = c("log10_theta"))

# show markov chains
#library(bayesplot)
#color_scheme_set("brewer-Spectral")
#mcmc_trace(posterior_samples_all, n_warmup = 1000,
#           facet_args = list(nrow = 2))

# show all marginal posterior distributions
posterior_sample_table.HP = data.frame(s_V = posterior_samples_merged_after_burnin.HP$log10_theta[,1],
                                       beta = posterior_samples_merged_after_burnin.HP$log10_theta[,2],
                                       q_FI = posterior_samples_merged_after_burnin.HP$log10_theta[,3],
                                       q_FM = posterior_samples_merged_after_burnin.HP$log10_theta[,4],
                                       kappa_A = posterior_samples_merged_after_burnin.HP$log10_theta[,5],
                                       s_M = posterior_samples_merged_after_burnin.HP$log10_theta[,6])




posterior_sample_table.LP = data.frame(s_V = posterior_samples_merged_after_burnin.LP$log10_theta[,1],
                                       beta = posterior_samples_merged_after_burnin.LP$log10_theta[,2],
                                       q_FI = posterior_samples_merged_after_burnin.LP$log10_theta[,3],
                                       q_FM = posterior_samples_merged_after_burnin.LP$log10_theta[,4],
                                       kappa_A = posterior_samples_merged_after_burnin.LP$log10_theta[,5],
                                       s_M = posterior_samples_merged_after_burnin.LP$log10_theta[,6])



write.csv(posterior_samples_merged_after_burnin.HP, file="H5N1-HP.csv")
write.csv(posterior_samples_merged_after_burnin.LP, file="H5N1-LP.csv")

# posterior predictive check
Within_host_model = function(t, y, theta){
  
  dydt1 = theta[6] - 1.1e-2 * y[1] - 0.4 * (y[6]/(y[6] + 1.2e+7)) * (1/(1 + 1e-4 * y[3])) * y[1] + 0.3 * y[2] - 4e-6 * (y[9]/ (y[9]+1e+6)) * y[1] + 0.3 * y[3]
  dydt2 = theta[1] * y[5] + 0.4 * (y[6]/(y[6] + 1.2e+7)) * (1 / (1 + 1e-4 * y[3])) * y[1] - 0.3 * y[2] - 1.1e-2 * y[2]
  dydt3 = 4e-6 * (y[9]/ (y[9]+1e+6)) * y[1] - 0.3 * y[3] - 1.1e-2 * y[3]
  
  
  dydt4 =  0.8 * (y[4]+y[8]) * (1 - (y[4] + y[5] + y[8])/ 7e+7) - theta[2] * y[4] * y[6] - 0.33 * y[7] * y[4] + 2.6 * y[8]
  dydt5 =  theta[2] * y[4] * y[6] - 3 * y[5] - 3 * y[7] * y[5] - 8 * ( t^4 / (t^4 + 15^4) ) * y[5]
  dydt6 =  100 * y[5] - 20 * y[6] - theta[5] * ( t^4 / (t^4 + 20^4 ) ) * y[6] - 1e-6 * y[1] *y[6]
  
  dydt7 = theta[3] * y[5] + theta[4] * y[2] - 2 * y[7]
  dydt8 = 0.33 * y[7] * y[4] - 2.6 * y[8]
  dydt9 = 3 * y[5] +  3 * y[7] * y[5] + 8 * ( t^4 / (t^4 + 15^4) ) * y[5] - 8e-7 * y[9] * y[2] - 2 * y[9]
  
  
  list(c(dydt1, dydt2, dydt3, dydt4, dydt5, dydt6, dydt7, dydt8, dydt9))
}


t_ppc = seq(0, 10, 0.1)

V_ppc.Vonly = matrix(, nrow = 6000, ncol = length(t_ppc))
lower_95PI.Vonly = t_ppc
median_95PI.Vonly = t_ppc
upper_95PI.Vonly = t_ppc

lower_90PI.Vonly = t_ppc
upper_90PI.Vonly = t_ppc


M_ppc.Vonly = matrix(, nrow = 6000, ncol = length(t_ppc))
M.lower_95PI.Vonly = t_ppc
M.median_95PI.Vonly = t_ppc
M.upper_95PI.Vonly = t_ppc

M.lower_90PI.Vonly = t_ppc
M.upper_90PI.Vonly = t_ppc


V_ppc.VM = matrix(, nrow = 6000, ncol = length(t_ppc))
lower_95PI.VM = t_ppc
median_95PI.VM = t_ppc
upper_95PI.VM = t_ppc

lower_90PI.VM = t_ppc
upper_90PI.VM = t_ppc


M_ppc.VM = matrix(, nrow = 6000, ncol = length(t_ppc))
M.lower_95PI.VM = t_ppc
M.median_95PI.VM = t_ppc
M.upper_95PI.VM = t_ppc

M.lower_90PI.VM = t_ppc
M.upper_90PI.VM = t_ppc


for (i in 1:6000){
  
  y_init_HP = c(10^posterior_sample_table.HP$s_M[i]/ 1.1e-2,
                0,
                0,
                7e+7, 
                0, 
                100,
                0,
                0,
                0)
  
  
  y_init_LP = c(10^posterior_sample_table.LP$s_M[i]/ 1.1e-2,
                0,
                0,
                7e+7, 
                0, 
                100,
                0,
                0,
                0)
  
  
  param_fit.HP = c(10^posterior_sample_table.HP$s_V[i], 
                   10^posterior_sample_table.HP$beta[i], 
                   10^posterior_sample_table.HP$q_FI[i], 
                   10^posterior_sample_table.HP$q_FM[i],
                   10^posterior_sample_table.HP$kappa_A[i],
                   10^posterior_sample_table.HP$s_M[i])
  #10^posterior_sample_table.HP$kappa_F[i])
  
  
  param_fit.LP = c(10^posterior_sample_table.LP$s_V[i], 
                   10^posterior_sample_table.LP$beta[i], 
                   10^posterior_sample_table.LP$q_FI[i], 
                   10^posterior_sample_table.LP$q_FM[i],
                   10^posterior_sample_table.LP$kappa_A[i],
                   10^posterior_sample_table.LP$s_M[i])
  #10^posterior_sample_table.LP$kappa_F[i])
  
  
  model_output.HP = ode(times = t_ppc, y = y_init_HP, func = Within_host_model, parms = param_fit.HP, method = "bdf")
  V_ppc.Vonly[i,] = model_output.HP[,7]
  M_ppc.Vonly[i,] = model_output.HP[,2] + model_output.HP[,3] + model_output.HP[,4]
  
  
  
  model_output.LP = ode(times = t_ppc, y = y_init_LP, func = Within_host_model, parms = param_fit.LP, method = "bdf")
  V_ppc.VM[i,] = model_output.LP[,7]
  M_ppc.VM[i,] = model_output.LP[,2] + model_output.LP[,3] + model_output.LP[,4]
}

for (i in 1:length(t_ppc)){
  
  temp.Vonly = unname(quantile(V_ppc.Vonly[,i], probs = c(0.025, 0.05, 0.5, 0.95, 0.975)))
  
  lower_95PI.Vonly[i] = temp.Vonly[1]
  lower_90PI.Vonly[i] = temp.Vonly[2]
  median_95PI.Vonly[i] = temp.Vonly[3]
  upper_90PI.Vonly[i] = temp.Vonly[4]
  upper_95PI.Vonly[i] = temp.Vonly[5]
  
  M.temp.Vonly = unname(quantile(M_ppc.Vonly[,i], probs = c(0.025, 0.05, 0.5, 0.95, 0.975)))
  M.lower_95PI.Vonly[i] = M.temp.Vonly[1]
  M.lower_90PI.Vonly[i] = M.temp.Vonly[2]
  M.median_95PI.Vonly[i] = M.temp.Vonly[3]
  M.upper_90PI.Vonly[i] = M.temp.Vonly[4]
  M.upper_95PI.Vonly[i] = M.temp.Vonly[5]
  
  temp.VM = unname(quantile(V_ppc.VM[,i],probs = c(0.025, 0.05, 0.5, 0.95, 0.975)))
  lower_95PI.VM[i] = temp.VM[1]
  lower_90PI.VM[i] = temp.VM[2]
  median_95PI.VM[i] = temp.VM[3]
  upper_90PI.VM[i] = temp.VM[4]
  upper_95PI.VM[i] = temp.VM[5]
  
  M.temp.VM = unname(quantile(M_ppc.VM[,i], probs = c(0.025, 0.05, 0.5, 0.95, 0.975)))
  M.lower_95PI.VM[i] = M.temp.VM[1]
  M.lower_90PI.VM[i] = M.temp.VM[2]
  M.median_95PI.VM[i] = M.temp.VM[3]
  M.upper_90PI.VM[i] = M.temp.VM[4]
  M.upper_95PI.VM[i] = M.temp.VM[5]
}



data_plot.HP <-  data.frame(time = V.time.HP,
                            V = V.data.HP)
fit_plot.HP <- data.frame(time = t_ppc, 
                          lower_95PI = c(lower_95PI.Vonly), 
                          upper_95PI = c(upper_95PI.Vonly),
                          lower_90PI = c(lower_90PI.Vonly),
                          upper_90PI = c(upper_90PI.Vonly))
ggplot(fit_plot.HP, aes(time))+
  geom_point(data = data_plot.HP, aes(time, log10(V)), size = 3) +
  geom_ribbon(aes(ymin = log10(lower_95PI), ymax = log10(upper_95PI), fill = "blue"), alpha = 0.3, na.rm = TRUE) +
  geom_ribbon(aes(ymin = log10(lower_90PI), ymax = log10(upper_90PI), fill = "green"), alpha = 0.4, na.rm = TRUE) +
  theme_bw() + 
  theme(text = element_text(size = 25))  + 
  ylab("Viral load (fold change)") + xlab("Days post infection (p.i.)") + 
  theme(legend.key = element_rect(fill = "white", colour = "white"), legend.position = "top") + 
  #scale_color_manual(values = wes_palette("Darjeeling1", n = 1)) + 
  #scale_fill_manual(values = wes_palette("Darjeeling1", n = 1)) + 
  ylim(0,8) + 
  scale_fill_manual( "PI",
                     labels = c("95%", "90%"), 
                     values=c("blue"="blue","green"="green"))




data_plot.LP <-  data.frame(time = V.time.LP,
                            V = V.data.LP)
fit_plot.LP <- data.frame(time = t_ppc, 
                          lower_95PI = c(lower_95PI.VM), 
                          upper_95PI = c(upper_95PI.VM),
                          lower_90PI = c(lower_90PI.VM),
                          upper_90PI = c(upper_90PI.VM))
ggplot(fit_plot.LP, aes(time))+
  geom_point(data = data_plot.LP, aes(time, log10(V)), size = 3) +
  geom_ribbon(aes(ymin = log10(lower_95PI), ymax = log10(upper_95PI), fill = "blue"), alpha = 0.3, na.rm = TRUE) +
  geom_ribbon(aes(ymin = log10(lower_90PI), ymax = log10(upper_90PI), fill = "green"), alpha = 0.5, na.rm = TRUE) +
  theme_bw() + 
  theme(text = element_text(size = 25))  + 
  ylab("Viral load (fold change)") + xlab("Days post infection (p.i.)") + 
  theme(legend.key = element_rect(fill = "white", colour = "white"), legend.position = "top") + 
  #scale_color_manual(values = wes_palette("Darjeeling1", n = 1)) + 
  #scale_fill_manual(values = wes_palette("Darjeeling1", n = 1)) + 
  ylim(0,8) + 
  scale_fill_manual( "PI",
                     labels = c("95%", "90%"), 
                     values=c("blue"="blue","green"="green"))




M.data_plot.HP <-  data.frame(time = M.time.HP,
                              M = M.data.HP)
fit_plot.M.HP <- data.frame(time = t_ppc, 
                            lower_95PI = c(M.lower_95PI.Vonly), 
                            upper_95PI = c(M.upper_95PI.Vonly),
                            lower_90PI = c(M.lower_90PI.Vonly),
                            upper_90PI = c(M.upper_90PI.Vonly))
ggplot(fit_plot.M.HP, aes(time))+
  geom_point(data = M.data_plot.HP, aes(time, log10(M)), size = 3) +
  geom_ribbon(aes(ymin = log10(lower_95PI), ymax = log10(upper_95PI), fill = "blue"), alpha = 0.3, na.rm = TRUE) +
  geom_ribbon(aes(ymin = log10(lower_90PI), ymax = log10(upper_90PI), fill = "green"), alpha = 0.5, na.rm = TRUE) +
  theme_bw() + 
  theme(text = element_text(size = 25))  + 
  ylab("# of macrophages (fold change)") + xlab("Days post infection (p.i.)") + 
  theme(legend.key = element_rect(fill = "white", colour = "white"),legend.position = "top") + 
  #scale_color_manual(values = wes_palette("Darjeeling1", n = 4)) + 
  #scale_fill_manual(values = wes_palette("Darjeeling1", n = 4)) + 
  ylim(1,8) + 
  scale_fill_manual( "PI",
                     labels = c("95%", "90%"), 
                     values=c("blue"="blue","green"="green"))










M.data_plot.LP <-  data.frame(time = M.time.LP,
                              M = M.data.LP)
fit_plot.M.LP <- data.frame(time = t_ppc, 
                            lower_95PI = c(M.lower_95PI.VM), 
                            upper_95PI = c(M.upper_95PI.VM),
                            lower_90PI = c(M.lower_90PI.VM),
                            upper_90PI = c(M.upper_90PI.VM))

ggplot(fit_plot.M.LP, aes(time))+
  geom_point(data = M.data_plot.LP, aes(time, log10(M)), size = 3) +
  geom_ribbon(aes(ymin = log10(lower_95PI), ymax = log10(upper_95PI), fill = "blue"), alpha = 0.3, na.rm = TRUE) +
  geom_ribbon(aes(ymin = log10(lower_90PI), ymax = log10(upper_90PI), fill = "green"), alpha = 0.5, na.rm = TRUE) +
  theme_bw() + 
  theme(text = element_text(size = 25))  + 
  ylab("# of macrophages (fold change)") + xlab("Days post infection (p.i.)") + 
  theme(legend.key = element_rect(fill = "white", colour = "white"),legend.position = "top") + 
  #scale_color_manual(values = wes_palette("Darjeeling1", n = 4)) + 
  #scale_fill_manual(values = wes_palette("Darjeeling1", n = 4)) + 
  ylim(2,8) + 
  scale_fill_manual( "PI",
                     labels = c("95%", "90%"), 
                     values=c("blue"="blue","green"="green"))



