functions{
  real[]  Model_fitting(real t, real[] y, real[] theta, real[] x_r, int[] x_i){
    

    real dydt[9];
    
    
    dydt[1] = theta[6] - 1.1e-2 * y[1] - 0.4 * (y[6]/(y[6] + 1.2e+7)) * (1/(1 + 1e-4 * y[3])) * y[1] + 0.3 * y[2] - 4e-6 * (y[9]/ (y[9]+1e+6)) * y[1] + 0.3 * y[3];
    dydt[2] = theta[1] * y[5] + 0.4 * (y[6]/(y[6] + 1.2e+7)) * (1 / (1 + 1e-4 * y[3])) * y[1] - 0.3 * y[2] - 1.1e-2 * y[2];
    dydt[3] = 4e-6 * (y[9]/ (y[9]+1e+6)) * y[1] - 0.3 * y[3] - 1.1e-2 * y[3];
    
    
    dydt[4] =  0.8 * (y[4]+y[8]) * (1 - (y[4] + y[5] + y[8])/ 7e+7) - theta[2] * y[4] * y[6] - 0.33 * y[7] * y[4] + 2.6 * y[8]; // T
    dydt[5] =  theta[2] * y[4] * y[6] - 3 * y[5] - 3 * y[7] * y[5] - 8 * ( t^4 / (t^4 + 15^4) ) * y[5]; // I 
    dydt[6] =  100 * y[5] - 20 * y[6] - theta[5] * ( t^4 / (t^4 + 20^4 ) ) * y[6] - 1e-6 * y[1] *y[6]; // V


    dydt[7] = theta[3] * y[5] + theta[4] * y[2] - 2 * y[7]; // F
    dydt[8] = 0.33 * y[7] * y[4] - 2.6 * y[8]; // R
    dydt[9] = 3 * y[5] +  3 * y[7] * y[5] + 8 * ( t^4 / (t^4 + 15^4) ) * y[5] - 8e-7 * y[9] * y[2] - 2 * y[9]; // D
    

    return dydt;
  }
}

data{
  int<lower = 0> V_time_len; // length of time data HP
  int<lower = 0> V_data_len; // length of viral load HP
  real V_time_data[V_time_len]; // time series data  HP
  real log_V_data[V_data_len]; // viral load data HP
  
  int<lower = 0> M_time_len; // length of time data HP
  int<lower = 0> M_data_len; // length of viral load HP
  real M_time_data[M_time_len]; // time series data  HP
  real log_M_data[M_data_len]; // viral load data HP
  
  real t0; // initial time point 
  real M10;
  real M20;
  real T0; // initial target cells
  real I0; // initial infected cells 
  real V0; // initial viral inoculation
  real F0; // initial interferon
  real R0; // initial resistant cells
  real D0;
  
}

transformed data{
  real x_r[0];
  int x_i[0];
}

parameters{
  
  real log10_theta[6]; // use log10() normal priors [s_V, beta, q_FI, q_FM, kappa_AS, sM]
  //real<lower=0> theta; // use log10()-normal distribution as priors 
  real<lower=0> sigma[2];
}




transformed parameters{
  
  real y_hat[V_time_len,9];
  real y_hat2[M_time_len,9];
  vector[V_data_len] V_pred;
  vector[M_data_len] M_pred;
  real Y0[9];
  real theta_hat[6];

  
  theta_hat[1] = 10^log10_theta[1]; // sV
  theta_hat[2] = 10^log10_theta[2]; // beta
  theta_hat[3] = 10^log10_theta[3]; // q_FI
  theta_hat[4] = 10^log10_theta[4]; // q_FM
  theta_hat[5] = 10^log10_theta[5]; // kappa_AS
  theta_hat[6] = 10^log10_theta[6]; // sM


  Y0[1] = theta_hat[6] / 1.1e-2;
  Y0[2] = M10;
  Y0[3] = M20;
  Y0[4] = T0;
  Y0[5] = I0;
  Y0[6] = V0;
  Y0[7] = F0;
  Y0[8] = R0;
  Y0[9] = D0;
  
  
  y_hat = integrate_ode_bdf(Model_fitting, Y0, t0, V_time_data, theta_hat, x_r, x_i);
  for(i in 1:V_time_len){
    V_pred[i] = y_hat[i,6];
  }
  
  
  y_hat2 = integrate_ode_bdf(Model_fitting, Y0, t0, M_time_data, theta_hat, x_r, x_i);
  for(j in 1:M_time_len){
    M_pred[j] = y_hat2[j,1] + y_hat2[j,2] + y_hat2[j,3];  
  }


}

model{

//priors
log10_theta[1] ~ normal(-1,2); // s_V
log10_theta[2] ~ normal(-6,3); // beta
log10_theta[3] ~ normal(-5,3); // q_FI
log10_theta[4] ~ normal(-7,3); // q_FM
log10_theta[5] ~ normal(1,1); // kappa_AS
log10_theta[6] ~ normal(2,1); // sM

sigma[1] ~ normal(0,1);
sigma[2] ~ normal(0,1);



//log_viral_load_data_WT ~ normal(log(V_pred_WT), sigma[1]); // --> measured 
//log_viral_load_data_KO ~ normal(log(V_pred_KO), sigma[1]); 

//Macrophage_data_WT ~ normal(log(Macrophage_pred_WT), sigma[2]);
//Macrophage_data_KO ~ normal(log(Macrophage_pred_KO), sigma[2]);


for (i in 1: V_time_len){
  target += normal_lpdf(log_V_data[i] | log(V_pred[i]), sigma[1]);
  }

for (i in 1: M_time_len){
  target += normal_lpdf(log_M_data[i] | log(M_pred[i]), sigma[2]);
  }

}




